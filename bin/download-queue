#!/bin/bash
#
# This script is re-useable: it requires a directory with (sorted)
# files, which each contain one url to be downloaded into the
# cache directory.

set -e

function log() { printf "[%s] %s\n" "$(date +'%F %T')" "$*"; }

if [ $# -ne 4 ]
then echo "Required: $0 <queue> <todo> <cache> <cache-size>" >&2
     exit 1
fi
QUEUE="$1"
PATHS_TODO="$2"
CACHE_DIR="$3"
CACHE_SIZE="$4"

# Stop running after this many minutes to avoid a total explosion og
# parallel loads.
MAX_RUN=600
RUN_START=$(date +%s)

if [ ! -d "$PATHS_TODO" ]
then log "No plan for queue $QUEUE in $PATHS_TODO"
     exit 0
fi

log "** Downloader for $QUEUE into $CACHE_DIR, max $CACHE_SIZE"


[ -d "$CACHE_DIR" ] || mkdir -p "$CACHE_DIR"
CACHED=$(ls "$CACHE_DIR" | wc -l)
if [ $CACHED -ge $CACHE_SIZE ]
then log "Cache is full (size $CACHED, max $CACHE_SIZE)"
     exit 0
fi

[ -d "$LOGS"  ] || mkdir -p "$LOGS"

[ -d "$LOCKS" ] || mkdir -p "$LOCKS"
LOCK_DEST="$LOCKS/$QUEUE-$$-locker"
touch "$LOCK_DEST"

ls -1 "$PATHS_TODO" | while read BATCH_LABEL
    do TODO="$PATHS_TODO/$BATCH_LABEL"

       LOCK="$LOCKS/$QUEUE-$BATCH_LABEL.lock"
       if ! ln "$LOCK_DEST" "$LOCK" 2>/dev/null
       then log "$QUEUE-$BATCH_LABEL is currently locked.  Next..."
            continue
       fi

       AWS_PATH=$(cat "$TODO" 2>/dev/null || :)
       if [ -z "$AWS_PATH" ]   # race condition under low load
       then rm -f "$LOCK"
            continue
       fi

       DEST="$CACHE_DIR/$BATCH_LABEL-$QUEUE.warc.gz"

       DOWNLOAD="$DEST.downloading"
       rm -f "$DOWNLOAD"    # broken downloads

       log "Collecting $AWS_PATH into $DOWNLOAD"
       START=$(date +%s)
       $AWS_CP "$AWS_PATH" "$DOWNLOAD" >/dev/null
       END=$(date +%s)

       SIZE=$(ls -lhk "$DOWNLOAD" | perl -ane 'print $F[4]')
       log "Got $BATCH_LABEL-$QUEUE, size $SIZE in $(($END-$START))s"

       log "$BATCH_LABEL-$QUEUE available in $DEST"
       mv "$DOWNLOAD" "$DEST"

       rm "$TODO"
       rm "$LOCK"

       # Downloaded enough?
       CACHED=$(ls "$CACHE_DIR" | wc -l)
       [ $CACHED -lt $CACHE_SIZE ] || break

       [ $(($END-$RUN_START)) -lt $MAX_RUN ] || break
    done

log "READY $QUEUE $(ls $CACHE_DIR | wc -l)"
rm $LOCK_DEST
