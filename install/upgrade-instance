#!/bin/bash

set -e

ETC="$HOME/etc"
[ -d "$ETC" ] || mkdir $ETC

BIN="$HOME/bin"
[ -d "$BIN" ] || mkdir $BIN

SCRIPT="$PWD/$0"
REPO="${SCRIPT%/*/*}"

#
### Install the configurable profile
#

PROFILE="$ETC/crawl-profile"

if [ ! -f "$PROFILE" ]
then TEMPLATE="$REPO/install/crawl-profile.template"

     perl -wpe <"$TEMPLATE" >"$PROFILE" "
       s!\\[% SCRIPT %\\]!$0!;
       s!\\[% DATE %\\]!$(date)!;
       s!\\[% REPO %\\]!$REPO!;
     "

     cat <<__CONFIGURE
Installed configuration template in $PROFILE

*
*** now configure $PROFILE
*** then rerun 'make'
*
__CONFIGURE

fi

source "$PROFILE"

# Shut-up cron for now.  Tasks which are running are allowed to keep
# on running.  Cleanups will get delayed one more release, or are part
# of the regular cleanup schemes.

# When someone has disabled a cron by hand, it will temporarily get two #s
TMP_CRON="${TMPDIR:-/tmp}/$$.crontab.new"
crontab -l >"$TMP_CRON"
sed '/\$RUN/s/^/#/' "$TMP_CRON" | crontab

#
### Some configuration checks
#

if [ -z "$BIGDISK" ]
then echo "You need to set BIGDISK to your bulk store." >&2
     exit 6    # ENXIO
fi

if [ ! -d "$BIGDISK" ]
then echo "BIGDISK '$BIGDISK' does not exist or not a directory." >&2
     exit 2    # ENOENT
fi

if [ -z "$FASTDISK" ]
then echo "You need to set FASTDISK to your bulk store." >&2
     exit 6    # ENXIO
fi

if [ ! -d "$FASTDISK" ]
then echo "FASTDISK '$FASTDISK' does not exist or not a directory." >&2
     exit 2    # ENOENT
fi


#
### Update all plugins
#

#
### Crontab
#

# The "run" wrapper to be used for cron: it
if [ -f $BIN/run ]
then chmod u+w $BIN/run
else
    cp $REPO/install/run $BIN/run
    chmod u=rx $BIN/run
    echo "installed $BIN/run"
fi

if ! grep '^RUN=' "$TMP_CRON" >/dev/null
then cat <<__HEAD >>"$TMP_CRON"

# The following lines are maintained by "make install".  Your changes to the
# start times are preserved.  Most configuration via $HOME/etc/crawl-profile.
RUN=$BIN/run

__HEAD

fi

for PROJECT in $(ls "$REPO")
do
    for CRON in $REPO/$PROJECT/bin/cron.*
    do  [ -f "$CRON" ] || continue
        grep "\$RUN '$PROJECT' '$CRON'" "$TMP_CRON" >/dev/null && continue

        STAMPS=$(sed -n 's/# DEFAULT_SCHEDULE="\(.*\)".*/\1/p' "$CRON")
        cat <<__STARTER >>"$TMP_CRON"
$STAMPS \$RUN '$PROJECT' '$CRON'
__STARTER

        echo "Please, configure new crontab entry for '$CRON'"
    done

done

crontab <"$TMP_CRON"
rm -f "$TMP_CRON"

echo "Done"
