#!/usr/bin/env perl
#
# This script produces static webpages, based on separate content
# components in the 'raw' directory.  After checks, you can sync this
# to its publicly visible destination.  Use 'make'
#
# Define the PIPELINE_WEBSITE

use warnings;
use strict;

use File::Slurp    qw/read_file write_file/;
use Data::Dumper   qw/Dumper/;
use File::Copy     qw/copy/;
use IO::Dir        ();
use POSIX          qw/strftime/;
use Template       ();
use HTML::Entities qw/encode_entities/;
use Text::VimColor ();
use List::MoreUtils qw/first_index/;

sub process_dir($$$);
sub process_raw($$$);
sub process_link($$$$);

my $source  = 'raw';
my $webroot = '/';

# Where will the website be produced: the root of the
my $outtree = $ENV{PIPELINE_WEBSITE}
   || die "You have to define PIPELINE_WEBSITE";

my $tt      = Template->new(INCLUDE_PATH => [ 'templates', '.' ]);

my @produced;
process_dir $source, $outtree,
 +{ today   => strftime("%F", localtime)
  };

sub process_dir($$$)
{	my ($from, $to, $data) = @_;

	#
	# Seperate the include files from the data files.
	#   info about includes is passed to the templates.
	#

	my $d = IO::Dir->new($from) or die $!;
	my @d;
	my %data = %$data;
	while(defined(my $e = $d->read))
	{   if($e =~ m/^\./) {next}  # hidden
		elsif($e =~ m/\.incl$/)
		{   my $l = $e =~ s/\./_/r;
			$data{$l} = "$from/$e";
		}
		else { push @d, $e }
	}

	#
	# Process each of the data items
	#

	foreach my $e (@d)
	{   my ($f, $t) = ("$from/$e", "$to/$e");

		if(-l $f)
		{   unlink $t;
			my $dest = readlink $f;
			symlink($dest, $t)
			    or die "cannot symlink $t -> $dest: $!\n";
		}
		elsif(-d $f)
		{   -d $t or mkdir $t or die $!;
			process_dir($f, $t, \%data);
		}
		elsif($t =~ s/\.raw$/.html/)
		{   process_raw($f, $t, \%data);
		}
		elsif(!-f $t || -M $t > -M $f || -s $t != -s $f)
		{   copy $f, $t
			   or die "cannot copy $f to $t: $!\n";
		}

		push @produced, $t;
	}
}

sub _show_code($)
{	my $block = shift;
	my $unique = 't' . int rand 100000;
	my (@heads, @tabs);

	while($block =~ m! \< (XML|JSON|PERL|PLAIN) (?: \s+([^>]*) | ) \>
						  (.*?)
					   \</ \1 \>!gsx)
	{	my ($format, $options, $body) = (lc $1, $2, $3);
		push @heads, qq{<li><a href="#$unique-$format">$format</a></li>};

		my %options = map +(lc $_ => 1), split " ", $options // '';

		my $s    = Text::VimColor->new(string => $body, filetype => $format);
		my $html = $s->html;
		$html =~ s/^\n+//;  # <pre> is sensitive for blank lines
		$html =~ s/\n+$//;

		my $content;
		if($options{nrs})
		{	$html =~ s!\n!</pre></li>\n<li><pre>!g;
			$content = "<ol>\n<li><pre>$html</pre></li>\n</ol>\n";
		}
		else
		{	$content = qq{<pre class="$format-fragment">$html</pre>};
		}

		my $copy;
		if($options{copy})
		{   $copy = encode_entities $body;
		}

		my %vars = (
			unique  => $unique, 
			format  => $format,
			content => $content,
			copy    => $copy,
		);

		my $code;
		$tt->process('code.tt', \%vars, \$code)
			or die "Code processing error: ", $tt->error, "\n";

		push @tabs, $code;
	}
	return $tabs[0] if @tabs < 2;

	my @sheads = sort @heads;
	my $active = first_index { /\>xml\</ } @sheads;
	$active > 0 or $active = 0;

	my $heads  = join "\n  ", @sheads;

	return <<__TABS;
<script>\$( function() { \$("#$unique").tabs({ active: $active }) } )</script>
<div id="$unique" class="code-alternatives">
  <ul>
  $heads
  </ul>
  @tabs
</div>
__TABS
}

sub process_raw($$$)
{	my ($f, $t, $data) = @_;

	# take the <h1> from the file, as title
	my @raw  = read_file $f;
	shift @raw while @raw && $raw[0] =~ m/ ^ \s* $ /x;
	my $raw  = join '', @raw;

	my $title = $raw =~ m!<h1>(.*?)</h1>!i ? $1 : '';
	$title =~ s/<[^>]*>/ /g;
	$title =~ s/<[^>]*>/ /g;
	$title = "Pipeline; $title" unless $title =~ /Pipeline/;
	local $data->{title} = $title;

	local $data->{is_frontpage} =
		$t =~ m!^public_html/index.html$! ? 'yes' :undef;

	# Add an HR before each H2
 	$raw =~ s!<h2>!<hr>\n<h2>!g;

	### First, produce the body of the page in raw

	shift @raw while @raw && $raw[0] =~ m/^\s*$/;
	my $content = '';
	$tt->process(\$raw, $data, \$content)
		or die "Content processing error: ", $tt->error, "\n";

	my ($intro, @content) = split /\n\-\-(left|right)\s*\r?\n/, $content;
	my @sections = +{ left => $intro };
	while(my $where = shift @content)
	{   if($where eq 'left')
		{   push @sections, +{ left => shift @content };
		}
		elsif($where eq 'right')
		{   @sections or die "direction in $f";
			$sections[-1]{right} = shift @content;
		}
	}
	local $data->{sections} = \@sections;

	### Now compose the whole page

	my $text = '';
	$tt->process('top-raw.tt', $data, \$text)
		or die "Page processing error: ", $tt->error, "\n";

	for($text)
	{   s! (\<a[^>]*\shref=)(?: "([^"]*)" | '([^']*)' | (\S*)) ([^>]*\> .*? \</a\>) !
		  process_link($t, $1, $2 || $3 || $4, $5) !sgeix;

		s!<HEADER>(.*?)</HEADER>!<div class="codeblock_light_header">$1</div>!g;
		s!((?:\<(XML|JSON|PERL|PLAIN)[\s>].*?\</\2\>\s*)+)!_show_code($1)!gse;
	}

	write_file $t, $text;
}

sub process_link($$$$)
{	my ($fn, $pre, $link, $post) = @_;
my $x = qq{$pre"$link"$post\n};

    # pre: <a href=    link: /     post: >HOME</a>

	warn "$fn: target will be added automatically\n"
		if $link !~ m[^/]
		&& ($pre =~ m/\btarget\=/i || $post =~ m/\btarget\=/);

	my ($target, $parent, $flag, $missing) = ('', '', '', 0);
	(my $page = $link) =~ s/\#.*$//;

	if($link =~ m!^\#!)
	{   ;  # local ref
	}
	elsif($link =~ m!^([\w-]+)\:!)         # external link
	{   $target = $1 eq 'mailto' ? '' : ' target="_blank"';
	}
	elsif($link !~ m!^/!)
	{   #!!! do not use relative links in .incl files!!!
	}
	elsif( -f $outtree.$page )     # linked page exists
	{   ;
	}
	elsif( -d $outtree.$link )
	{
		#warn "$fn: linking to directory not permitted: $link\n";
		$link .= 'index.html';
		unless(-f $outtree.$link)
		{   warn "$fn: linked page is missing: $link\n";
			$missing = 1;
		}
	}
	else
	{   warn "$fn: linked page is missing: $link\n";
	}

	#
	# set links in bold
	#

	if($link !~ m!^/!) { ; }  # skip externals
	elsif($missing)
	{   $pre  =~ s/\<a\b/<s/i;
		$post =~ s!\</a\b.*$!</s>!i;
		return qq{$pre"$link"$post};
	}
    elsif($fn =~ m/^\Q$outtree$link\E$/)
    {   $pre  =~ s/\<a\b/<span/i;
        $post =~ s!\</a\b.*$!</span>!i;

		# No double class attributes allowed
           $pre  =~ s!\bclass="!class="myself !i
        or $post =~ s!\bclass="!class="myself !i
        or $post =~ s!>!class="myself">!;

        return qq{$pre"$link"$post};
    }
	else
	{   my (undef, $first) = split m!/!, $fn;
		my $p   = "/$first/index.html";
		$parent = ' class="parent"' if $link eq $p;
	}

	qq{$pre"$link"$target$parent$post$flag};
}
